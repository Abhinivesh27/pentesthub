import subprocess
from xml.dom.minidom import parseString

from flask import Flask, Response, request, jsonify

app = Flask(__name__)
data = ''
permissions = []
services = []
packageName = []
activity = []
bugs = []
sdkVersion = []
tech = ['Flutter','Native']

@app.route('/', methods=['POST','OPTIONS'])
def process_input():
    
    # Get the input string from the request
    # apk_url = request.json.get('apk')
    permissions.clear
    sdkVersion.clear
    packageName.clear
    activity.clear
    bugs.clear
    sdkVersion.clear
    apk_url = request.args.get('apk',type=str)
    
    
    try:
         subprocess.run(['rm','-r','app'])
         subprocess.run(['rm','app.apk'])
    except Exception:
         print(Exception)
    subprocess.run(['wget','-O','app.apk',apk_url])
    subprocess.run(['apktool','d','app.apk'])
    with open('app/AndroidManifest.xml','r') as f:
        data = f.read()
    dom = parseString(data)
    nodes = dom.getElementsByTagName('uses-permission')
    # Iterate over all the uses-permission nodes
    for node in nodes:
        permissions.append(node.getAttribute('android:name'))


    node2 = dom.getElementsByTagName('meta-data')

    for node in node2:
            services.append(node.getAttribute('android:name'))

    node3 = dom.getElementsByTagName('manifest')

    for node in node3:
        packageName.append(node.getAttribute('package'))

    activityNode = dom.getElementsByTagName('activity')
    for node in activityNode:
        activity.append(node.getAttribute('android:name'))

    #compileSdkVersionCodename
    versionNode = dom.getElementsByTagName('manifest')
    for node in versionNode:
        sdkVersion.append(node.getAttribute('compileSdkVersionCodename'))

    # Process the input string (replace 'a' with 'b' as an example)
    
    # Return the output string as a JSON response

    for buffer in services:
         if "firebase.core" in buffer:
              bugs.append("Firebase API Key hardcoded")
         elif "firebase.storage" in buffer:
              bugs.append("Unprotected Firebase Cloud Storage bucket")
         elif "firestore" in buffer:
              bugs.append("Open Firestore database found")
    
    for perm in permissions:
         if "android.permission.INTERNET" in perm:
               bugs.append("SSL Pinning Bypass")
    
    responses = jsonify({"ok":"yes"})
    responses.headers.add("Access-Control-Allow-Origin", "*") 
    return responses

@app.route('/apk', methods=['GET'])
def returnData():
    responses = jsonify({'package_name': packageName[0], 'services': services, 'permissions':permissions,'activities':activity, 'version_name': sdkVersion[0],'bugs':  bugs, 'tech':tech  })
    responses.headers.add("Access-Control-Allow-Origin", "*") 
    return responses

if __name__ == '__main__':
    app.run(debug=True)
